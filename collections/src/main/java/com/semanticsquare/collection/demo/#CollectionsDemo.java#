package com.semanticsquare.collection.demo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

class CollectionsDemo {
	
	public static void main(String... args) {
		collectionsDemo();
	}

	private static void collectionsDemo() {
		// boolean addAll(Collection<? super T> c, T... elements);
		List<String> list = new ArrayList<>();
		list.add("Raj");
		list.add("John");
		list.add("John");

		String[] array = { "Anita" };

		Collections.addAll(list, array);
		// hoac la
		// list.addAll(Arrays.asList(array));

		System.out.println("list: " + list);

		// static <T extends Comparable<? super T>> void sort(List<T> list)
		Collections.sort(list);

		System.out.println("Sorted list: " + list);

		// <T> int binarySearch(List<? extends Comparable<? super T>> list, T key)
		// Needs to be sorted. O(log(n)).
		// If not sorted results are undefined. Might perform an inefficient linear
		// search
		// For Sets: HashSet ~ O(1). TreeSet ~ O(log(n)), i.e., same efficiency as
		// binary search
		// Note: List.contains is O(n)

		System.out.println("Is John There?: " + Collections.binarySearch(list, "John"));

		Collections.reverse(list);
		System.out.println("Reverse list: " + list);

		Collections.swap(list, 0, 3);
		System.out.println("After swapping: " + list);

		// xem John xuat hien bao nhieu lan
		System.out.println("# John's: " + Collections.frequency(list, "John"));

		// tron ngau nhien
		Collections.shuffle(list);
		System.out.println("After shuffing: " + list);

		System.out.println("Max: " + Collections.max(list)); // Natural ordering
		System.out.println("Min: " + Collections.min(list));

		// Singleton ~ <T> Set<T> singleton(T o)
		// Return an immutable set containing only the specified object
		// Others: <T> List<T> singletonList(T o) & <K,V> Map<K,v> singletonMap(K key, V
		// value)
		list.removeAll(Collections.singleton("John"));
		System.out.println("List after removeAll 'Join': " + list);

		// Unmodifiable View ~ to provide clients with read-only access to internal
		// collection
		Collection<String> unmodifiable = Collections.unmodifiableCollection(list);
		System.out.println("unmodifiable: " + unmodifiable);
		Collections.sort(list);
		System.out.println("Is Anita there?: " + Collections.binarySearch(list, "Anita"));
		// unmodifiable.add("Phuong");

		list.add("Phuong");
		System.out.println("unmodifiable 2: " + unmodifiable);

	}

}
