package com.semanticsquare.collection.demo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class ArraysDemo {
	private static void sequential() {
		// asList() most commonly used
		// List<T> asList(T...)

		String[] strArray = new String[] { "Raj", "Anita" };
		// List<String> strings = Arrays.asList(strArray); // fixed-size
		// System.out.println("strings: " + strings);

		// // strings.remove(0);
		// // strings.add("a");

		// strings.set(0, "John");
		// System.out.println("strings: " + strings);

		// // Creating modificable ArrayList from an Array
		// strings = new ArrayList<String>(Arrays.asList(strArray));

		// // Creating an ArrayList with fixed-size
		// List<String> fixedList = Arrays.asList(new String[3]);

		// // recall from autoboxing that arrays are not auto-boxeable
		// List<Integer> fixedList2 = Arrays.asList(new Integer[2]);
		// System.out.println("fixedList2: " + fixedList2);
		// System.out.println("fixedList2's size: " + fixedList2.size());

		// List<int[]> fixedList3 = Arrays.asList(new int[2], new int[3]);
		// System.out.println("fixedList3: " + fixedList3);
		// System.out.println("fixedList3's size: " + fixedList3.size());

		// Sorting: void sort(Object[]) - Uses Merge-sort with natural ordering
		// Partially sorted array: far fewer than nlog(n) comparisons
		Arrays.sort(strArray);
		System.out.println(Arrays.toString(strArray));
		// Additional comments: Well suited for merging 2 or more sorted arrays
		// Concatenate the arrays & sort the resulting array !!!

		// Sorting: void sort(int[]) - Uses quick sort
		int[] iArray = { 23, 4, 59 };
		Arrays.sort(iArray);
		System.out.println("iArray: " + Arrays.toString(iArray));

		// Binary Search: int binarySearch(int[], int);
		// returns index if element found
		// otherwise returns -(insertion point) - 1
		// input array must be sorted, Otherwise, behavior is undefined
		System.out.println("index returned by binary search: " + Arrays.binarySearch(new int[] { 4, 23, 59 }, 5));

		int[] newArray = Arrays.copyOf(iArray, 8);
		System.out.println("newArray: " + Arrays.toString(newArray));

		int[] newArray1 = new int[6];
		System.arraycopy(iArray, 0, newArray1, 3, iArray.length);
		System.out.println("newArray1: " + Arrays.toString(newArray1));

		Arrays.fill(newArray1, 69);
		System.out.println("newArray1: " + Arrays.toString(newArray1));

		System.out.println("Equals: " + Arrays.equals(iArray, newArray));

		// Arrays.deepEquals(Object[], Object[]);
		// Return true if arrays are deeply equal to one another.
		// Approriate for nested arrays
		int[][][] deepArray1 = { { { 1, 2, 3 }, { 4, 5, 6 } } };
		int[][][] deepArray2 = { { { 1, 2, 7 }, { 4, 5, 6 } } };
		Integer[] integers1 = new Integer[3];
		Integer[] integers2 = new Integer[3];
		// int[] deepArray1 = { 1, 2, 3 };
		// int[] deepArray2 = { 4, 5, 6 };

		System.out.println("Deep Array Equals? " + Arrays.deepEquals(deepArray1, deepArray2));
		System.out.println("Deep Array Equals? " + Arrays.deepEquals(integers1, integers2));
	}

	// Java 8 ~ Parallelized Operations
	private static void parallel() {
		// For large arrays on multi-core. Min size atleast 1 >> 13 = 8192
		int[] iArray = { 23, 4, 59 };
		Arrays.parallelSort(iArray);
		System.out.println("iArray paralllel sort: " + Arrays.toString(iArray));
	}

	public static void main(String... args) {
		// sequential();
		parallel();
	}
}
